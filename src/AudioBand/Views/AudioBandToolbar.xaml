<UserControl x:Class="AudioBand.Views.AudioBandToolbar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:viewModels="clr-namespace:AudioBand.ViewModels"
             xmlns:converters="clr-namespace:AudioBand.ValueConverters"
             xmlns:audioSource="clr-namespace:AudioBand.AudioSource;assembly=AudioBand.AudioSource"
             xmlns:fluentWpf="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
             xmlns:behaviors="clr-namespace:AudioBand.Behaviors"
             xmlns:resources="clr-namespace:AudioBand.Resources"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:models="clr-namespace:AudioBand.Models"
             mc:Ignorable="d"
             HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
             Background="{Binding ViewModels.AudioBandViewModel.BackgroundColor, Converter={x:Static converters:Converters.ColorToBrush}}"
             d:DesignHeight="450" d:DesignWidth="800"
             d:DataContext="{d:DesignInstance viewModels:AudioBandToolbarViewModel, IsDesignTimeCreatable=False}">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <resources:SharedDictionary Source="../Resources/ToolbarButtonStyles.xaml"/>
                <resources:SharedDictionary Source="../Resources/ToolbarProgressBarStyle.xaml"/>
                <resources:SharedDictionary Source="../Resources/ToolbarContextMenuStyles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <DrawingImage x:Key="AlbumArtFallback">
                <DrawingImage.Drawing>
                    <DrawingGroup ClipGeometry="M0,0 V256 H256 V0 H0 Z">
                        <DrawingGroup Opacity="1">
                            <GeometryDrawing>
                                <GeometryDrawing.Pen>
                                    <Pen Brush="#ffffff" Thickness="8" StartLineCap="Flat" EndLineCap="Flat" LineJoin="Miter" />
                                </GeometryDrawing.Pen>
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry RadiusX="0" RadiusY="0" Rect="8,8,240,240" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <GeometryDrawing>
                                <GeometryDrawing.Pen>
                                    <Pen Brush="#ffffff" Thickness="10" StartLineCap="Flat" EndLineCap="Flat" LineJoin="Miter" />
                                </GeometryDrawing.Pen>
                                <GeometryDrawing.Geometry>
                                    <EllipseGeometry RadiusX="84" RadiusY="84" Center="128,128" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <GeometryDrawing Brush="#ffffff">
                                <GeometryDrawing.Geometry>
                                    <EllipseGeometry RadiusX="24" RadiusY="24" Center="128,128" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                        </DrawingGroup>
                    </DrawingGroup>
                </DrawingImage.Drawing>
            </DrawingImage>
            <PopupAnimation x:Key="{x:Static SystemParameters.ToolTipPopupAnimationKey}">Slide</PopupAnimation>
        </ResourceDictionary>
    </UserControl.Resources>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding LoadCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <i:Interaction.Behaviors>
        <behaviors:DpiScaling/>
    </i:Interaction.Behaviors>
    <UserControl.ContextMenu>
        <fluentWpf:AcrylicContextMenu Style="{StaticResource ToolbarContextMenu}">
            <i:Interaction.Behaviors>
                <behaviors:DpiScaling/>
            </i:Interaction.Behaviors>
            <ContextMenu.Resources>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource ToolbarContextMenuItem}"/>
            </ContextMenu.Resources>
            <MenuItem Header="AudioBand Settings" Command="{Binding ShowSettingsWindowCommand}" Style="{StaticResource ToolbarContextMenuItem}">
                <MenuItem.Icon>
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE713;"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="Audio sources" ItemsSource="{Binding AudioSources}" Style="{StaticResource ToolbarContextMenuItem}">
                <MenuItem.Icon>
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE8D6;"/>
                </MenuItem.Icon>
                <MenuItem.ItemTemplate>
                    <DataTemplate DataType="{x:Type audioSource:IAudioSource}">
                        <TextBlock Text="{Binding Name}"/>
                    </DataTemplate>
                </MenuItem.ItemTemplate>
                <MenuItem.ItemContainerStyle>
                    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource ToolbarContextMenuItem}">
                        <Setter Property="Command" Value="{Binding PlacementTarget.DataContext.SelectAudioSourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                        <Setter Property="CommandParameter" Value="{Binding}"/>
                        <Style.Triggers>
                            <DataTrigger Value="True">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{x:Static converters:MultiConverters.Comparison}">
                                        <Binding Path="Name"/>
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ContextMenu}}" Path="PlacementTarget.DataContext.SelectedAudioSource.Name"/>
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <Setter Property="Icon">
                                    <Setter.Value>
                                        <TextBlock Text="&#xE73E;" FontFamily="Segoe MDL2 Assets"/>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
        </fluentWpf:AcrylicContextMenu>
    </UserControl.ContextMenu>
    <Canvas Width="{Binding ViewModels.AudioBandViewModel.Width}" Height="{Binding ViewModels.AudioBandViewModel.Height}">
        <Canvas.Resources>
            <behaviors:BindingProxy x:Key="DataContextProxy" Value="{Binding .}"/>
        </Canvas.Resources>
        <Viewbox x:Name="AlbumArt" DataContext="{Binding ViewModels.AlbumArtViewModel}"
                     Width="{Binding Width}" Height="{Binding Height}"
                     Canvas.Left="{Binding XPosition}" Canvas.Top="{Binding YPosition}"
                     Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                     ToolTipService.InitialShowDelay="500" ToolTipService.ShowDuration="999999"
                     ToolTipService.HasDropShadow="True"
                     RenderOptions.BitmapScalingMode="Fant">
            <Image>
                <Image.Style>
                    <Style TargetType="{x:Type Image}">
                        <Setter Property="Source" Value="{Binding AlbumArt, FallbackValue={StaticResource AlbumArtFallback}}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding AlbumArt}" Value="{x:Null}">
                                <Setter Property="Source" Value="{Binding PlaceholderPath, 
                                                                        Converter={x:Static converters:Converters.PathToImageSource},
                                                                        TargetNullValue={StaticResource AlbumArtFallback},
                                                                        FallbackValue={StaticResource AlbumArtFallback}}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
            <Viewbox.ToolTip>
                <ToolTip DataContext="{Binding Source={StaticResource DataContextProxy}, Path=Value.ViewModels.AlbumArtPopupViewModel}"
                         Background="Black" BorderThickness="0" Padding="0" HasDropShadow="True" PlacementTarget="{Binding ElementName=AlbumArt}"
                         Placement="RelativePoint" HorizontalOffset="{Binding XPosition}" VerticalOffset="{Binding Margin}"
                         x:Name="AlbumArtTooltip">
                    <i:Interaction.Behaviors>
                        <behaviors:DpiScaling/>
                    </i:Interaction.Behaviors>
                    <Viewbox Width="{Binding Width}" Height="{Binding Height}" RenderOptions.BitmapScalingMode="Fant"
                             Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}">
                        <Image DataContext="{Binding Source={StaticResource DataContextProxy}, Path=Value.ViewModels.AlbumArtViewModel}">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Setter Property="Source" Value="{Binding AlbumArt, FallbackValue={StaticResource AlbumArtFallback}}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding AlbumArt}" Value="{x:Null}">
                                            <Setter Property="Source" Value="{Binding PlaceholderPath,               
                                                    Converter={x:Static converters:Converters.PathToImageSource},
                                                    FallbackValue={StaticResource AlbumArtFallback},
                                                    TargetNullValue={StaticResource AlbumArtFallback}}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                    </Viewbox>
                    <ToolTip.Style>
                        <Style TargetType="{x:Type ToolTip}">
                            <Setter Property="Opacity" Value="1"/>
                            <Style.Triggers>
                                <EventTrigger RoutedEvent="Opened">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                     From="0" To="1" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToolTip.Style>
                </ToolTip>
            </Viewbox.ToolTip>
        </Viewbox>
        <Button x:Name="PlayPauseButton" DataContext="{Binding ViewModels.PlayPauseButtonViewModel}"
                Width="{Binding Width}"
                Height="{Binding Height}"
                Canvas.Left="{Binding XPosition}" Canvas.Top="{Binding YPosition}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                Style="{StaticResource ToolbarPlayPauseButtonStyle}"
                Command="{Binding PlayPauseTrackCommand}"/>
        <Button x:Name="NextButton" DataContext="{Binding ViewModels.NextButtonViewModel}"
                Width="{Binding Width}"
                Height="{Binding Height}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                Canvas.Left="{Binding XPosition}" Canvas.Top="{Binding YPosition}"
                Style="{StaticResource ToolbarNextButtonStyle}"
                Command="{Binding NextTrackCommand}"/>
        <Button x:Name="PreviousButton" DataContext="{Binding ViewModels.PreviousButtonViewModel}"
                Width="{Binding Width}"
                Height="{Binding Height}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                Canvas.Left="{Binding XPosition}" Canvas.Top="{Binding YPosition}"
                Style="{StaticResource ToolbarPreviousButtonStyle}"
                Command="{Binding PreviousTrackCommand}"/>
        <Button x:Name="RepeatModeButton" DataContext="{Binding ViewModels.RepeatModeButtonViewModel}"
                Width="{Binding Width}"
                Height="{Binding Height}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                Canvas.Left="{Binding XPosition}" Canvas.Top="{Binding YPosition}"
                Style="{StaticResource ToolbarRepeatModeButtonStyle}"
                Command="{Binding CycleRepeatModeCommand}"/>
        <Button x:Name="ShuffleModeButton" DataContext="{Binding ViewModels.ShuffleModeButtonViewModel}"
                Width="{Binding Width}"
                Height="{Binding Height}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                Canvas.Left="{Binding XPosition}" Canvas.Top="{Binding YPosition}"
                Style="{StaticResource ToolbarShuffleModeButtonStyle}"
                Command="{Binding ToggleShuffleCommand}"/>
        <Slider x:Name="ProgressBar" DataContext="{Binding ViewModels.ProgressBarViewModel}"
                Width="{Binding Width}" Height="{Binding Height}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                Canvas.Left="{Binding XPosition}" Canvas.Top="{Binding YPosition}"
                Style="{StaticResource ProgressBarStyle}"
                Minimum="0" Maximum="{Binding TrackLength, Converter={x:Static converters:Converters.TimeSpanToMs}, Mode=OneWay}">
            <i:Interaction.Behaviors>
                <behaviors:SliderThrottle FinalValue="{Binding TrackProgress, Converter={x:Static converters:Converters.TimeSpanToMs}, Mode=TwoWay}"/>
                <behaviors:SliderClickAndDrag/>
            </i:Interaction.Behaviors>
        </Slider>
        <ItemsControl x:Name="CustomLabels" ItemsSource="{Binding ViewModels.CustomLabelsViewModel.CustomLabels}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="ContentPresenter">
                    <Setter Property="Canvas.Left" Value="{Binding XPosition}" />
                    <Setter Property="Canvas.Top" Value="{Binding YPosition}" />
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type viewModels:CustomLabelViewModel}">
                    <Canvas Width="{Binding Width}" Height="{Binding Height}" ClipToBounds="True" Background="Transparent">
                        <i:Interaction.Behaviors>
                            <behaviors:MarqueeContainer ScrollDuration="{Binding ScrollSpeed}" 
                                                        TargetChild="{Binding ElementName=TextBlock1}"
                                                        TargetCopy="{Binding ElementName=TextBlockCopy}"
                                                        TextOverflow="{Binding TextOverflow}"
                                                        ScrollBehavior="{Binding ScrollBehavior}"
                                                        IsPlaying="{Binding IsPlaying}"/>
                        </i:Interaction.Behaviors>
                        <TextBlock x:Name="TextBlock1" behaviors:TextBlockTextSegments.TextSegments="{Binding TextSegments}"
                                   MinWidth="{Binding Width}" MinHeight="{Binding Height}"
                                   Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                                   Foreground="{Binding Color, Converter={x:Static converters:Converters.ColorToBrush}}"
                                   FontSize="{Binding FontSize}" FontFamily="{Binding FontFamily}"
                                   VerticalAlignment="Center" TextTrimming="None" TextWrapping="NoWrap"
                                   TextAlignment="{Binding TextAlignment, Converter={x:Static converters:Converters.TextAlignment}}">
                        </TextBlock>
                        <TextBlock x:Name="TextBlockCopy" behaviors:TextBlockTextSegments.TextSegments="{Binding TextSegments}"
                                   MinWidth="{Binding Width}" MinHeight="{Binding Height}"
                                   Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}"
                                   Foreground="{Binding Color, Converter={x:Static converters:Converters.ColorToBrush}}"
                                   FontSize="{Binding FontSize}" FontFamily="{Binding FontFamily}"
                                   VerticalAlignment="Center" TextTrimming="None" TextWrapping="NoWrap" Opacity="0"
                                   TextAlignment="{Binding TextAlignment, Converter={x:Static converters:Converters.TextAlignment}}">
                        </TextBlock>
                        <Canvas.Style>
                            <Style TargetType="{x:Type Canvas}">
                                <Style.Resources>
                                    <LinearGradientBrush x:Key="Mask" StartPoint="0,0" MappingMode="Absolute">
                                        <!-- Use mapping mode absolute because relative mode is relative to the child text instead of the canvas -->
                                        <LinearGradientBrush.EndPoint>
                                            <MultiBinding Converter="{x:Static converters:MultiConverters.Point}">
                                                <Binding RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" Path="ActualWidth"/>
                                                <Binding>
                                                    <Binding.Source>0.0</Binding.Source>
                                                </Binding>
                                            </MultiBinding>
                                        </LinearGradientBrush.EndPoint>
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Color="Transparent" Offset="0"/>
                                            <GradientStop Color="Black" Offset="{Binding LeftFadeOffset}"/>
                                            <GradientStop Color="Black" Offset="{Binding RightFadeOffset}"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Style.Resources>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding FadeEffect}" Value="{x:Static models:TextFadeEffect.Always}">
                                        <Setter Property="OpacityMask" Value="{StaticResource Mask}"/>
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding FadeEffect}" Value="{x:Static models:TextFadeEffect.OnlyWhenScrolling}"/>
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(behaviors:MarqueeContainer.IsScrolling)}" Value="True"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="OpacityMask" Value="{StaticResource Mask}"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Canvas.Style>
                    </Canvas>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Canvas>
</UserControl>
