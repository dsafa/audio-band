<UserControl x:Class="AudioBand.Views.AudioBandToolbar"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:audioSource="clr-namespace:AudioBand.AudioSource;assembly=AudioBand.AudioSource"
             xmlns:behaviors="clr-namespace:AudioBand.Behaviors"
             xmlns:converters="clr-namespace:AudioBand.ValueConverters"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:fluentWpf="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:models="clr-namespace:AudioBand.Models"
             xmlns:resources="clr-namespace:AudioBand.Resources"
             xmlns:viewModels="clr-namespace:AudioBand.ViewModels"
             HorizontalAlignment="Stretch"
             VerticalAlignment="Stretch"
             d:DataContext="{d:DesignInstance viewModels:AudioBandToolbarViewModel,
                                              IsDesignTimeCreatable=False}"
             d:DesignHeight="450"
             d:DesignWidth="800"
             Background="{Binding ViewModels.AudioBandViewModel.BackgroundColor, Converter={x:Static converters:Converters.ColorToBrush}}"
             mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <resources:SharedDictionary Source="../Resources/ToolbarButtonStyles.xaml" />
                <resources:SharedDictionary Source="../Resources/ToolbarProgressBarStyle.xaml" />
                <resources:SharedDictionary Source="../Resources/ToolbarContextMenuStyles.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <DrawingImage x:Key="AlbumArtFallback">
                <DrawingImage.Drawing>
                    <DrawingGroup ClipGeometry="M0,0 V256 H256 V0 H0 Z">
                        <DrawingGroup Opacity="1">
                            <GeometryDrawing>
                                <GeometryDrawing.Pen>
                                    <Pen Brush="#ffffff"
                                         EndLineCap="Flat"
                                         LineJoin="Miter"
                                         StartLineCap="Flat"
                                         Thickness="8" />
                                </GeometryDrawing.Pen>
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry RadiusX="0"
                                                       RadiusY="0"
                                                       Rect="8,8,240,240" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <GeometryDrawing>
                                <GeometryDrawing.Pen>
                                    <Pen Brush="#ffffff"
                                         EndLineCap="Flat"
                                         LineJoin="Miter"
                                         StartLineCap="Flat"
                                         Thickness="10" />
                                </GeometryDrawing.Pen>
                                <GeometryDrawing.Geometry>
                                    <EllipseGeometry Center="128,128"
                                                     RadiusX="84"
                                                     RadiusY="84" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <GeometryDrawing Brush="#ffffff">
                                <GeometryDrawing.Geometry>
                                    <EllipseGeometry Center="128,128"
                                                     RadiusX="24"
                                                     RadiusY="24" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                        </DrawingGroup>
                    </DrawingGroup>
                </DrawingImage.Drawing>
            </DrawingImage>
            <PopupAnimation x:Key="{x:Static SystemParameters.ToolTipPopupAnimationKey}">Slide</PopupAnimation>
        </ResourceDictionary>
    </UserControl.Resources>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding LoadCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <i:Interaction.Behaviors>
        <behaviors:DpiScaling />
    </i:Interaction.Behaviors>
    <UserControl.ContextMenu>
        <fluentWpf:AcrylicContextMenu Style="{StaticResource ToolbarContextMenu}">
            <i:Interaction.Behaviors>
                <behaviors:DpiScaling />
            </i:Interaction.Behaviors>
            <ContextMenu.Resources>
                <Style BasedOn="{StaticResource ToolbarContextMenuItem}" TargetType="{x:Type MenuItem}" />
            </ContextMenu.Resources>
            <MenuItem Command="{Binding ShowSettingsWindowCommand}"
                      Header="AudioBand Settings"
                      Style="{StaticResource ToolbarContextMenuItem}">
                <MenuItem.Icon>
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE713;" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="Audio sources"
                      ItemsSource="{Binding AudioSources}"
                      Style="{StaticResource ToolbarContextMenuItem}">
                <MenuItem.Icon>
                    <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE8D6;" />
                </MenuItem.Icon>
                <MenuItem.ItemTemplate>
                    <DataTemplate DataType="{x:Type audioSource:IAudioSource}">
                        <TextBlock Text="{Binding Name}" />
                    </DataTemplate>
                </MenuItem.ItemTemplate>
                <MenuItem.ItemContainerStyle>
                    <Style BasedOn="{StaticResource ToolbarContextMenuItem}" TargetType="{x:Type MenuItem}">
                        <Setter Property="Command" Value="{Binding PlacementTarget.DataContext.SelectAudioSourceCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                        <Setter Property="CommandParameter" Value="{Binding}" />
                        <Style.Triggers>
                            <DataTrigger Value="True">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{x:Static converters:MultiConverters.Comparison}">
                                        <Binding Path="Name" />
                                        <Binding Path="PlacementTarget.DataContext.SelectedAudioSource.Name" RelativeSource="{RelativeSource AncestorType={x:Type ContextMenu}}" />
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <Setter Property="Icon">
                                    <Setter.Value>
                                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xE73E;" />
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </MenuItem.ItemContainerStyle>
            </MenuItem>
        </fluentWpf:AcrylicContextMenu>
    </UserControl.ContextMenu>
    <Canvas Width="{Binding ViewModels.AudioBandViewModel.Width}" Height="{Binding ViewModels.AudioBandViewModel.Height}">
        <Canvas.Resources>
            <behaviors:BindingProxy x:Key="DataContextProxy" Value="{Binding .}" />
        </Canvas.Resources>
        <Viewbox x:Name="AlbumArt"
                 Width="{Binding Width}"
                 Height="{Binding Height}"
                 behaviors:CanvasPositioning.Anchor="{Binding Anchor}"
                 behaviors:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                 behaviors:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                 DataContext="{Binding ViewModels.AlbumArtViewModel}"
                 RenderOptions.BitmapScalingMode="Fant"
                 ToolTipService.HasDropShadow="True"
                 ToolTipService.InitialShowDelay="500"
                 ToolTipService.ShowDuration="999999"
                 Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}">
            <Image>
                <Image.Style>
                    <Style TargetType="{x:Type Image}">
                        <Setter Property="Source" Value="{Binding AlbumArt, FallbackValue={StaticResource AlbumArtFallback}}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding AlbumArt}" Value="{x:Null}">
                                <Setter Property="Source" Value="{Binding PlaceholderPath, Converter={x:Static converters:Converters.PathToImageSource}, TargetNullValue={StaticResource AlbumArtFallback}, FallbackValue={StaticResource AlbumArtFallback}}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
            <Viewbox.ToolTip>
                <ToolTip x:Name="AlbumArtTooltip"
                         Padding="0"
                         Background="Black"
                         BorderThickness="0"
                         DataContext="{Binding Source={StaticResource DataContextProxy}, Path=Value.ViewModels.AlbumArtPopupViewModel}"
                         HasDropShadow="True"
                         HorizontalOffset="{Binding XPosition}"
                         Placement="RelativePoint"
                         PlacementTarget="{Binding ElementName=AlbumArt}"
                         VerticalOffset="{Binding Margin}">
                    <i:Interaction.Behaviors>
                        <behaviors:DpiScaling />
                    </i:Interaction.Behaviors>
                    <Viewbox Width="{Binding Width}"
                             Height="{Binding Height}"
                             RenderOptions.BitmapScalingMode="Fant"
                             Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}">
                        <Image DataContext="{Binding Source={StaticResource DataContextProxy}, Path=Value.ViewModels.AlbumArtViewModel}">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Setter Property="Source" Value="{Binding AlbumArt, FallbackValue={StaticResource AlbumArtFallback}}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding AlbumArt}" Value="{x:Null}">
                                            <Setter Property="Source" Value="{Binding PlaceholderPath, Converter={x:Static converters:Converters.PathToImageSource}, FallbackValue={StaticResource AlbumArtFallback}, TargetNullValue={StaticResource AlbumArtFallback}}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                    </Viewbox>
                    <ToolTip.Style>
                        <Style TargetType="{x:Type ToolTip}">
                            <Setter Property="Opacity" Value="1" />
                            <Style.Triggers>
                                <EventTrigger RoutedEvent="Opened">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                             From="0"
                                                             To="1"
                                                             Duration="0:0:0.3" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToolTip.Style>
                </ToolTip>
            </Viewbox.ToolTip>
        </Viewbox>
        <Button x:Name="PlayPauseButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                behaviors:CanvasPositioning.Anchor="{Binding Anchor}"
                behaviors:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                behaviors:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding PlayPauseTrackCommand}"
                DataContext="{Binding ViewModels.PlayPauseButtonViewModel}"
                Style="{StaticResource ToolbarPlayPauseButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}" />
        <Button x:Name="NextButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                behaviors:CanvasPositioning.Anchor="{Binding Anchor}"
                behaviors:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                behaviors:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding NextTrackCommand}"
                DataContext="{Binding ViewModels.NextButtonViewModel}"
                Style="{StaticResource ToolbarNextButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}" />
        <Button x:Name="PreviousButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                behaviors:CanvasPositioning.Anchor="{Binding Anchor}"
                behaviors:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                behaviors:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding PreviousTrackCommand}"
                DataContext="{Binding ViewModels.PreviousButtonViewModel}"
                Style="{StaticResource ToolbarPreviousButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}" />
        <Button x:Name="RepeatModeButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                behaviors:CanvasPositioning.Anchor="{Binding Anchor}"
                behaviors:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                behaviors:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding CycleRepeatModeCommand}"
                DataContext="{Binding ViewModels.RepeatModeButtonViewModel}"
                Style="{StaticResource ToolbarRepeatModeButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}" />
        <Button x:Name="ShuffleModeButton"
                Width="{Binding Width}"
                Height="{Binding Height}"
                behaviors:CanvasPositioning.Anchor="{Binding Anchor}"
                behaviors:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                behaviors:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                Command="{Binding ToggleShuffleCommand}"
                DataContext="{Binding ViewModels.ShuffleModeButtonViewModel}"
                Style="{StaticResource ToolbarShuffleModeButtonStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}" />
        <Slider x:Name="ProgressBar"
                Width="{Binding Width}"
                Height="{Binding Height}"
                behaviors:CanvasPositioning.Anchor="{Binding Anchor}"
                behaviors:CanvasPositioning.AnchorXDistance="{Binding XPosition}"
                behaviors:CanvasPositioning.AnchorYDistance="{Binding YPosition}"
                DataContext="{Binding ViewModels.ProgressBarViewModel}"
                Maximum="{Binding TrackLength, Converter={x:Static converters:Converters.TimeSpanToMs}, Mode=OneWay}"
                Minimum="0"
                Style="{StaticResource ProgressBarStyle}"
                Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}">
            <i:Interaction.Behaviors>
                <behaviors:SliderThrottle FinalValue="{Binding TrackProgress, Converter={x:Static converters:Converters.TimeSpanToMs}, Mode=TwoWay}" />
                <behaviors:SliderClickAndDrag />
            </i:Interaction.Behaviors>
        </Slider>
        <ItemsControl x:Name="CustomLabels"
                      Width="{Binding ViewModels.AudioBandViewModel.Width}"
                      Height="{Binding ViewModels.AudioBandViewModel.Height}"
                      ItemsSource="{Binding ViewModels.CustomLabelsViewModel.CustomLabels}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="ContentPresenter">
                    <Setter Property="behaviors:CanvasPositioning.Anchor" Value="{Binding Anchor}" />
                    <Setter Property="behaviors:CanvasPositioning.AnchorXDistance" Value="{Binding XPosition}" />
                    <Setter Property="behaviors:CanvasPositioning.AnchorYDistance" Value="{Binding YPosition}" />
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type viewModels:CustomLabelViewModel}">
                    <Canvas Width="{Binding Width}"
                            Height="{Binding Height}"
                            Background="Transparent"
                            ClipToBounds="True">
                        <i:Interaction.Behaviors>
                            <behaviors:MarqueeContainer IsPlaying="{Binding IsPlaying}"
                                                        ScrollBehavior="{Binding ScrollBehavior}"
                                                        ScrollDuration="{Binding ScrollSpeed}"
                                                        TargetChild="{Binding ElementName=TextBlock1}"
                                                        TargetCopy="{Binding ElementName=TextBlockCopy}"
                                                        TextOverflow="{Binding TextOverflow}" />
                        </i:Interaction.Behaviors>
                        <TextBlock x:Name="TextBlock1"
                                   MinWidth="{Binding Width}"
                                   MinHeight="{Binding Height}"
                                   VerticalAlignment="Center"
                                   behaviors:TextBlockTextSegments.TextSegments="{Binding TextSegments}"
                                   FontFamily="{Binding FontFamily}"
                                   FontSize="{Binding FontSize}"
                                   Foreground="{Binding Color, Converter={x:Static converters:Converters.ColorToBrush}}"
                                   TextAlignment="{Binding TextAlignment, Converter={x:Static converters:Converters.TextAlignment}}"
                                   TextTrimming="None"
                                   TextWrapping="NoWrap"
                                   Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}" />
                        <TextBlock x:Name="TextBlockCopy"
                                   MinWidth="{Binding Width}"
                                   MinHeight="{Binding Height}"
                                   VerticalAlignment="Center"
                                   behaviors:TextBlockTextSegments.TextSegments="{Binding TextSegments}"
                                   FontFamily="{Binding FontFamily}"
                                   FontSize="{Binding FontSize}"
                                   Foreground="{Binding Color, Converter={x:Static converters:Converters.ColorToBrush}}"
                                   Opacity="0"
                                   TextAlignment="{Binding TextAlignment, Converter={x:Static converters:Converters.TextAlignment}}"
                                   TextTrimming="None"
                                   TextWrapping="NoWrap"
                                   Visibility="{Binding IsVisible, Converter={x:Static converters:Converters.BoolToVisibility}}" />
                        <Canvas.Style>
                            <Style TargetType="{x:Type Canvas}">
                                <Style.Resources>
                                    <LinearGradientBrush x:Key="Mask" MappingMode="Absolute" StartPoint="0,0">
                                        <!--  Use mapping mode absolute because relative mode is relative to the child text instead of the canvas  -->
                                        <LinearGradientBrush.EndPoint>
                                            <MultiBinding Converter="{x:Static converters:MultiConverters.Point}">
                                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}" />
                                                <Binding>
                                                    <Binding.Source>0.0</Binding.Source>
                                                </Binding>
                                            </MultiBinding>
                                        </LinearGradientBrush.EndPoint>
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Transparent" />
                                            <GradientStop Offset="{Binding LeftFadeOffset}" Color="Black" />
                                            <GradientStop Offset="{Binding RightFadeOffset}" Color="Black" />
                                            <GradientStop Offset="1" Color="Transparent" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Style.Resources>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding FadeEffect}" Value="{x:Static models:TextFadeEffect.Always}">
                                        <Setter Property="OpacityMask" Value="{StaticResource Mask}" />
                                    </DataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding FadeEffect}" Value="{x:Static models:TextFadeEffect.OnlyWhenScrolling}" />
                                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(behaviors:MarqueeContainer.IsScrolling)}" Value="True" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="OpacityMask" Value="{StaticResource Mask}" />
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Canvas.Style>
                    </Canvas>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Canvas>
</UserControl>
