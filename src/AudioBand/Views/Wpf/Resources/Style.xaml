<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:behaviours="clr-namespace:AudioBand.Views.Wpf.Behaviours"
                    xmlns:converters="clr-namespace:AudioBand.Views.Wpf.ValueConverters"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:fw="clr-namespace:SourceChord.FluentWPF;assembly=FluentWPF"
                    xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.ToggleSwitch.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.PasswordBox.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/FluentWPF;component/Styles/Controls.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <Thickness x:Key="GridMargin" Left="0" Top="4" Right="0" Bottom="0"/>
    <Thickness x:Key="InputSpacing" Left="4" Top="0" Right="4" Bottom="0"/>
    <Thickness x:Key="BorderThickness">2</Thickness>
    <Color x:Key="BorderDefaultColor">#CCCCCC</Color>
    <Color x:Key="BorderHoverColor">#7A7A7A</Color>
    <Color x:Key="ButtonDisabledColor">#888888</Color>
    <Color x:Key="NavigationPaneHoverBackgroundColor">#CCAAAAAA</Color>
    <Color x:Key="NavigationPaneClickBackgroundColor">#DD888888</Color>
    <GridLength x:Key="GridRowHeight">35</GridLength>
    <sys:Double x:Key="NavigationPaneItemHeight">50</sys:Double>
    <sys:Double x:Key="NavigationPaneItemFontSize">24</sys:Double>
    <sys:Double x:Key="BodyFontSize">14</sys:Double>
    <sys:Double x:Key="TitleFontSize">24</sys:Double>
    <SolidColorBrush x:Key="BorderDefaultColorBrush" Color="{StaticResource BorderDefaultColor}" o:Freeze="True"/>
    <SolidColorBrush x:Key="BorderHoverColorBrush" Color="{StaticResource BorderHoverColor}" o:Freeze="True"/>
    <SolidColorBrush x:Key="BorderFocusedColorBrush" Color="{x:Static fw:AccentColors.ImmersiveSystemAccent}"/>
    <SolidColorBrush x:Key="NavigationPaneHoverBackgroundBrush" Color="{StaticResource NavigationPaneHoverBackgroundColor}" o:Freeze="True"/>
    <SolidColorBrush x:Key="IconColorBrush" Color="#999999" o:Freeze="True"/>
    <SolidColorBrush x:Key="ButtonDisabledColorBrush" Color="{StaticResource ButtonDisabledColor}" o:Freeze="True"/>
    <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.OnSwitchBrush.Win10" Color="{x:Static fw:AccentColors.ImmersiveSystemAccent}"/>
    <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.OnSwitchMouseOverBrush.Win10" Color="{x:Static fw:AccentColors.ImmersiveSystemAccentLight1}" />
    <SolidColorBrush x:Key="MahApps.Metro.Brushes.ToggleSwitchButton.ThumbIndicatorCheckedBrush.Win10" Color="White" o:Freeze="True"/>
    <RadialGradientBrush x:Shared="False" x:Key="RevealHoverLightBrush" MappingMode="Absolute" RadiusX="200" RadiusY="200">
        <RadialGradientBrush.Center>
            <MultiBinding Converter="{StaticResource relativePositionConverter}">
                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="(fw:PointerTracker.RootObject)"/>
                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}"/>
                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="(fw:PointerTracker.Position)" />
            </MultiBinding>
        </RadialGradientBrush.Center>
        <RadialGradientBrush.GradientOrigin>
            <MultiBinding Converter="{StaticResource relativePositionConverter}">
                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="(fw:PointerTracker.RootObject)"/>
                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}"/>
                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Rectangle}}" Path="(fw:PointerTracker.Position)" />
            </MultiBinding>
        </RadialGradientBrush.GradientOrigin>
        <GradientStop Color="#44FFFFFF" Offset="0"/>
        <GradientStop Color="Transparent" Offset="1"/>
    </RadialGradientBrush>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FontSize" Value="{StaticResource BodyFontSize}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="{StaticResource BorderDefaultColorBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDefaultColorBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            RenderTransformOrigin="0.5, 0.5">
                        <Border.RenderTransform>
                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                        </Border.RenderTransform>
                        <ContentPresenter Name="Content" 
                                          HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4" 
                                          TextBlock.Foreground="{TemplateBinding Foreground}"/>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.01" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(BorderBrush).(SolidColorBrush.Color)"
                                                        To="{StaticResource BorderHoverColor}" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(BorderBrush).(SolidColorBrush.Color)"
                                                        To="{StaticResource BorderHoverColor}" Duration="0:0:0.01"/>
                                        <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)"
                                                        To="{StaticResource BorderHoverColor}" Duration="0:0:0.01"/>
                                        <DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)"
                                                         To="0.98" Duration="0:0:0.01"/>
                                        <DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)"
                                                         To="0.98" Duration="0:0:0.01"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="(BorderBrush).(SolidColorBrush.Color)"
                                                        To="{StaticResource BorderHoverColor}" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource BorderFocusedColorBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource ButtonDisabledColorBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RevealButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonRevealStyle}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{fw:RevealBrush Color=LightGray, Size=50, Opacity=0.8}"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>
    <Style x:Key="NavigationPaneListBoxItem" TargetType="{x:Type ListBoxItem}">
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NavigationPaneTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="{StaticResource NavigationPaneItemFontSize}"/>
        <Setter Property="FontWeight" Value="Light"/>
    </Style>
    <Style x:Key="NavigationPaneRadioButton" TargetType="{x:Type RadioButton}">
        <Style.Resources>
            <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" Collapse="False"/>
        </Style.Resources>
        <Setter Property="FontSize" Value="{StaticResource NavigationPaneItemFontSize}"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Height" Value="{StaticResource NavigationPaneItemHeight}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Background="{TemplateBinding Background}"
                          RenderTransformOrigin="0.5, 0.5">
                        <Grid.RenderTransform>
                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                        </Grid.RenderTransform>
                        <Rectangle x:Name="RevealHoverLightLayer"
                                   Opacity="0"
                                   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                   Fill="{StaticResource RevealHoverLightBrush}"/>
                        <Border BorderBrush="{fw:RevealBrush Color=LightGray, Size=50, Opacity=0.8}"
                                BorderThickness="1" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                            <DockPanel LastChildFill="True">
                                <Rectangle DockPanel.Dock="Left" Fill="{x:Static fw:AccentColors.ImmersiveSystemAccentBrush}" Width="5" Height="25"
                                           Visibility="{TemplateBinding IsChecked, Converter={StaticResource BoolToVisibilityConverter}}" VerticalAlignment="Center"/>
                                <ContentPresenter Margin="15, 0, 0, 0" VerticalAlignment="Center"/>
                            </DockPanel>
                        </Border>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)"
                                                        To="{StaticResource NavigationPaneHoverBackgroundColor}" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="RevealHoverLightLayer" Storyboard.TargetProperty="Opacity"
                                                         To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)"
                                                        To="{StaticResource NavigationPaneClickBackgroundColor}" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)"
                                                         To="0.98" Duration="0:0:0.01"/>
                                        <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)"
                                                         To="0.98" Duration="0:0:0.01"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle x:Name="RevealHoverLightLayer"
                                   Opacity="0"
                                   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                   Fill="{StaticResource RevealHoverLightBrush}"/>
                        <DockPanel>
                            <iconPacks:PackIconMaterial x:Name="ExpanderIcon" DockPanel.Dock="Left"
                                                        Margin="20, 0, 0, 0"
                                                        HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                        HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                                        RenderTransformOrigin="0.5,0.5" Kind="ChevronRight">
                                <iconPacks:PackIconMaterial.RenderTransform>
                                    <RotateTransform Angle="0"/>
                                </iconPacks:PackIconMaterial.RenderTransform>
                            </iconPacks:PackIconMaterial>
                            <ContentPresenter Margin="10, 0, 0, 0" VerticalAlignment="Center"/>
                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)"
                                                        To="{StaticResource NavigationPaneHoverBackgroundColor}" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetName="RevealHoverLightLayer" Storyboard.TargetProperty="Opacity"
                                                         To="1" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderIcon" Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                                         To="0" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderIcon" Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                                         To="90" Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <QuadraticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NavigationPaneExpander" TargetType="{x:Type Expander}">
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="0" x:Name="ContentRow"/>
                        </Grid.RowDefinitions>
                        <ToggleButton Grid.Row="0" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Height="{StaticResource NavigationPaneItemHeight}"
                                      Content="{TemplateBinding Header}" Style="{StaticResource ExpanderToggleButton}"/>
                        <ContentPresenter Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding DesiredHeight, ElementName=Content}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Type Slider}}">
        <Setter Property="IsMoveToPointEnabled" Value="True"/>
    </Style>
    <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListView}}">
        <Setter Property="BorderThickness" Value="0"/>
    </Style>
    <Style TargetType="{x:Type metro:ToggleSwitch}" BasedOn="{StaticResource MahApps.Metro.Styles.ToggleSwitch.Win10}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{StaticResource BodyFontSize}"/>
    </Style>
    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="{StaticResource BodyFontSize}"/>
    </Style>
    <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MetroPasswordBox}">
        <Setter Property="metro:TextBoxHelper.ClearTextButton" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="4,0,0,0"/>
        <Setter Property="FontSize" Value="{StaticResource BodyFontSize}"/>
        <Setter Property="BorderThickness" Value="{StaticResource BorderThickness}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDefaultColorBrush}"/>
        <Setter Property="metro:ControlsHelper.MouseOverBorderBrush" Value="{StaticResource BorderHoverColorBrush}"/>
        <Setter Property="metro:ControlsHelper.FocusBorderBrush" Value="{StaticResource BorderFocusedColorBrush}"/>
        <Setter Property="metro:TextBoxHelper.ButtonWidth" Value="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=ActualHeight}"/>
        <Style.Resources>
            <SolidColorBrush x:Key="AccentColorBrush" Color="{x:Static fw:AccentColors.ImmersiveSystemAccent}"/>
            <SolidColorBrush x:Key="BlackBrush" Color="{StaticResource BorderHoverColor}"/>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type metro:NumericUpDown}" BasedOn="{StaticResource {x:Type metro:NumericUpDown}}">
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="{StaticResource BorderThickness}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDefaultColorBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource BodyFontSize}"/>
        <Setter Property="metro:ControlsHelper.MouseOverBorderBrush" Value="{StaticResource BorderHoverColorBrush}"/>
        <Setter Property="metro:ControlsHelper.FocusBorderBrush" Value="{StaticResource BorderFocusedColorBrush}"/>
        <Setter Property="Padding" Value="8,0,0,0"/>
        <Setter Property="metro:TextBoxHelper.ButtonWidth" Value="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=ActualHeight}"/>
        <Style.Resources>
            <SolidColorBrush x:Key="AccentColorBrush" Color="{x:Static fw:AccentColors.ImmersiveSystemAccent}"/>
            <SolidColorBrush x:Key="BlackBrush" Color="{StaticResource BorderHoverColor}"/>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="behaviours:NumericInput.Type" Value="Size">
                <Setter Property="NumericInputMode" Value="Numbers"/>
                <Setter Property="Minimum" Value="1"/>
                <Setter Property="Interval" Value="1"/>
            </Trigger>
            <Trigger Property="behaviours:NumericInput.Type" Value="Position">
                <Setter Property="NumericInputMode" Value="Numbers"/>
                <Setter Property="Interval" Value="1"/>
            </Trigger>
            <Trigger Property="behaviours:NumericInput.Type" Value="FontSize">
                <Setter Property="NumericInputMode" Value="Decimal"/>
                <Setter Property="Minimum" Value="0.5"/>
                <Setter Property="Interval" Value="0.5"/>
            </Trigger>
            <Trigger Property="behaviours:NumericInput.Type" Value="Positive">
                <Setter Property="NumericInputMode" Value="Numbers"/>
                <Setter Property="Minimum" Value="0"/>
                <Setter Property="Interval" Value="1"/>
            </Trigger>
            <Trigger Property="behaviours:NumericInput.Type" Value="Integer">
                <Setter Property="NumericInputMode" Value="Numbers"/>
                <Setter Property="Interval" Value="1"/>
            </Trigger>
            <Trigger Property="behaviours:NumericInput.Type" Value="WholeNumber">
                <Setter Property="NumericInputMode" Value="Numbers"/>
                <Setter Property="Minimum" Value="0"/>
                <Setter Property="Interval" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MetroTextBox}">
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="{StaticResource BorderThickness}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDefaultColorBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource BodyFontSize}"/>
        <Setter Property="Padding" Value="{StaticResource InputSpacing}"/>
        <Setter Property="metro:ControlsHelper.MouseOverBorderBrush" Value="{StaticResource BorderHoverColorBrush}"/>
        <Setter Property="metro:ControlsHelper.FocusBorderBrush" Value="{StaticResource BorderFocusedColorBrush}"/>
        <Setter Property="metro:TextBoxHelper.ButtonWidth" Value="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=ActualHeight}"/>
        <Style.Resources>
            <SolidColorBrush x:Key="AccentColorBrush" Color="{x:Static fw:AccentColors.ImmersiveSystemAccent}"/>
            <SolidColorBrush x:Key="BlackBrush" Color="{StaticResource BorderHoverColor}"/>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="{StaticResource BorderThickness}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDefaultColorBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource BodyFontSize}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="{Binding ElementName=Border, Path=ActualHeight}"/>
                            </Grid.ColumnDefinitions>
                            <ToggleButton x:Name="ToggleButton" Grid.Column="0" Grid.ColumnSpan="2"
                                          Focusable="false" ClickMode="Press" BorderThickness="0"
                                          IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <Border VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
                                    <iconPacks:PackIconMaterial Kind="ChevronDown" Foreground="{StaticResource IconColorBrush}"
                                                                Height="{Binding ElementName=Border, Path=ActualHeight}"
                                                                Width="{Binding ElementName=Border, Path=ActualHeight}"
                                                                HorizontalAlignment="Right" RenderTransformOrigin="0.5,0.5"
                                                                Margin="0, 0, -4, 0" VerticalContentAlignment="Center">
                                        <iconPacks:PackIconMaterial.RenderTransform>
                                            <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                                        </iconPacks:PackIconMaterial.RenderTransform>
                                    </iconPacks:PackIconMaterial>
                                    <Border.Style>
                                        <Style TargetType="{x:Type Border}">
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="{StaticResource BorderHoverColor}"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                </Border>
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <ContentPresenter VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                                                      HorizontalAlignment="{TemplateBinding HorizontalAlignment}"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <ContentPresenter Name="ContentSite" Grid.Column="0" IsHitTestVisible="False"
                                              Margin="{StaticResource InputSpacing}"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              VerticalAlignment="Center" HorizontalAlignment="Left" />
                            <TextBox x:Name="PART_EditableTextBox" Grid.Column="0" Style="{x:Null}"
                                     BorderThickness="0" Padding="{StaticResource InputSpacing}"
                                     HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                     VerticalContentAlignment="Center"
                                     Focusable="True" Background="Transparent"
                                     Visibility="Hidden"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"/>
                            <Popup x:Name="PART_Popup" Grid.Column="0" Placement="Bottom" AllowsTransparency="True"
                                   IsOpen="{TemplateBinding IsDropDownOpen}" PlacementTarget="{Binding ElementName=Border}"
                                   Focusable="False" PopupAnimation="Slide">
                                <Grid x:Name="Grid"
                                      MinWidth="{TemplateBinding ActualWidth}"
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                      Background="#F8F8F8">
                                    <Border x:Name="DropDownBorder" BorderThickness="1"
                                            BorderBrush="{StaticResource BorderDefaultColorBrush}"/>
                                    <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderFocusedColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderHoverColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="ComboBoxItem" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                <Style.Resources>
                    <sys:Double x:Key="ComboBoxItemHeight">30</sys:Double>
                </Style.Resources>
                <Setter Property="Height" Value="{StaticResource ComboBoxItemHeight}"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                            <Border x:Name="ComboBoxItem"
                                BorderBrush="{fw:RevealBrush Color=LightGray, Size={StaticResource ComboBoxItemHeight}, Opacity=0.8}"
                                BorderThickness="1" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                                <ContentPresenter/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{x:Static fw:AccentColors.ImmersiveSystemAccentLight3Brush}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource NavigationPaneHoverBackgroundBrush}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="IsMouseOver" Value="True"/>
                        </MultiTrigger.Conditions>
                        <MultiTrigger.Setters>
                            <Setter Property="Background" Value="{x:Static fw:AccentColors.ImmersiveSystemAccentBrush}"/>
                        </MultiTrigger.Setters>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDefaultColorBrush}"/>
        <Setter Property="metro:ControlsHelper.MouseOverBorderBrush" Value="{StaticResource BorderHoverColorBrush}"/>
        <Setter Property="metro:ControlsHelper.FocusBorderBrush" Value="{StaticResource BorderFocusedColorBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{x:Static fw:AccentColors.ImmersiveSystemAccentBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Grid}">
        <Style.Resources>
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="Margin" Value="{StaticResource GridMargin}"/>
            </Style>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="Margin" Value="{StaticResource GridMargin}"/>
            </Style>
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Margin" Value="{StaticResource GridMargin}"/>
            </Style>
            <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
                <Setter Property="Margin" Value="2, 2, 8, 0"/>
            </Style>
            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                <Setter Property="Margin" Value="2, 2, 8, 0"/>
            </Style>
            <Style TargetType="{x:Type DockPanel}">
                <Setter Property="Margin" Value="{StaticResource GridMargin}"/>
            </Style>
            <Style TargetType="{x:Type Rectangle}">
                <Setter Property="Margin" Value="{StaticResource GridMargin}"/>
            </Style>
            <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Type PasswordBox}}">
                <Setter Property="Margin" Value="{StaticResource GridMargin}"/>
            </Style>
            <Style TargetType="{x:Type metro:NumericUpDown}" BasedOn="{StaticResource {x:Type metro:NumericUpDown}}">
                <Setter Property="Margin" Value="{StaticResource GridMargin}"/>
            </Style>
        </Style.Resources>
    </Style>
</ResourceDictionary>